system "p 5001"system "l /home/packt/cms"/firstCap: Takes a string (sym) input and capitalizes the first letter of each word separated by a blank spacefirstCap:{" " sv {@[x;0;upper]} each (" " vs string x) except enlist ""}/VARIABLES AND HELPER TABLES/alldata: Aggregates data from the primary cms databasealldata: distinct `company`product xasc update showCompany:`$firstCap each company, showProduct:`$firstCap each product from ungroup select distinct product by company from cms where not null product/minDate: First monthminDate:exec date from select min date from cms where month=min month/maxDate: Last monthmaxDate:exec date from select max date from cms where month=max month/companyStateCity: Cleans and normalises the company names (capitalisations, etc)companyStateCity:select asc upper distinct state, asc `$firstCap each distinct city by company from cms/FUNCTIONS/getShowProduct: Function to get product list from company namegetShowProduct:{$[(`$"Select All") in x;raze exec showProduct from alldata;exec showProduct from alldata where showCompany in x]}/getShowState: Function to get state list from company namegetShowState:{$[(`$"Select All") in x;raze exec state from companyStateCity;exec state from companyStateCity where company = exec first company from alldata where showCompany in x]}/getShowCity: Function to get city list from company namegetShowCity:{$[(`$"Select All") in x;raze exec city from companyStateCity;exec city from companyStateCity where company = exec first company from alldata where showCompany in x]}/getShowInfo: Generic Function for Product, State and CitygetShowInfo:{y:`$"|" vs y;:asc distinct raze raze $[x~`product;getShowProduct each y;x~`state;getShowState each y;x~`city;getShowCity each y;""]}/Example: Run this after loading the entire script after removing the comment mark (/) from the beginning/getShowInfo[`state;"Abb Con-cise Optical Group Llc|Select All|Abbott Laboratories"]/Convert encoded URL into a Q dictionarydecodeJSON:{.j.k .h.uh x}/Convert atoms to listensym:{$[0>type x;enlist x;x]}/Date functionswithinDates:{enlist (within;`date;"D"$x[`date])}withinMonths:{enlist (within;`month;`month$"D"$x[`date])}/Helper function to remove null keysdelNullDict:{kx!x kx:where {not x~0n} each x}/If showdata=enlist 1,/Function to process the data for displaying results onlygetData:{"x is the dictionary from web";d:`$dx:lower delNullDict x; enz:`$delete showData,date,columns from dx; ?[`cms;(withinMonths x),(withinDates x),{(in;x 0;enlist 1_x)} each ((key enz),'value enz);0b;(dc)!dc:ensym `$x`columns]}/Aggregation FunctionaggDict:(`$("Total Payment";"Number of Payments";"Minimum Payment";"Maximum Payment";"Average Payment"))!((sum;`payment);(#:;`i);(min;`payment);(max;`payment);(avg;`payment))/Function to aggregate the datagetDataGroups:{[aggDict;x] "x is the dictionary from web";d:`$dx:lower delNullDict x; enz:`$delete showData,date,columns,aggVars,aggData from dx; ?[`cms;(withinMonths x),(withinDates x),{(in;x 0;enlist 1_x)} each ((key enz),'value enz);xv!xv:ensym `$x`aggVars;xa!aggDict xa:ensym `$x`aggData]}[aggDict;]/Generic Function to create error messageserrtable:{tab:([]Time:enlist `$string .z.Z;Alert:enlist x);(tab;"Missing Fields")}/Validation for inputinitialValidation:{$[0n~x[`company];:errtable `$"Company must be selected";(`aggVars in key x) and ((0=count x[`aggVars]) or 0n~x[`aggData]);:errtable `$"Both Metric and Aggregate Data field should be selected when using Aggregate Data option";x]}/Special Handling for some variables, in this case monthspecialHandling:{0N!x;$[`month in cols x; update `$string month from x;x]}/Normalise ColumnscolumnFix:{(`$firstCap each cols x) xcol x}/Use comma separator for numeric valuescommaFmt: {((x<0)#"-"),(reverse","sv 3 cut reverse string floor a),1_string(a:abs x)mod 1}/Wrapper for show data and aggregate data optionsgetRes:{0N!x;.Q.gc[];st:.z.t;x:decodeJSON x; if [not x ~ ix:initialValidation x;:ix]; res:$[`aggData in key x;getDataGroups x;getData x];res:specialHandling res; res:columnFix res;ccms:count cms; cres:count res; en:.z.t; .Q.gc[];:(res;`$(string en),": Processed ",(commaFmt ccms)," records in ",(string en - st)," seconds. Returned result with ",(commaFmt cres)," rows.\n")}