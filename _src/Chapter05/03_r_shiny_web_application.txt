## This is a Shiny web application. You can run the application by clicking# the 'Run App' button above.## Find out more about building applications with Shiny here:##    http://shiny.rstudio.com/#library(shiny)library(shinydashboard)library(data.table)library(DT)library(rjson)library(jsonlite)library(shinyjs)library(rkdb)ui <- dashboardPage (skin="purple",   dashboardHeader(title = "CMS Open Payments 2016"),  dashboardSidebar(  useShinyjs(),  sidebarMenu(  uiOutput("month"),  uiOutput("company"),  uiOutput("product"),  uiOutput("state"),  uiOutput("city"),  uiOutput("showData"),  uiOutput("displayColumns"),  uiOutput("aggregationColumns"),  actionButton("queryButton", "View Results")    )  ),dashboardBody(  tags$head(tags$link(rel = "stylesheet", type = "text/css", href = "packt.css")),  textOutput("stats"),  dataTableOutput("tableData")  ),  title = "CMS Open Payments Data Mining")# Define server logic required to draw a histogramserver <- function(input, output, session) {    h <- open_connection("localhost","5001")    minDate <- execute(h,"minDate")  maxDate <- execute(h,"maxDate")  startDate <- minDate  endDate <- startDate + 31    cmsdata <- data.table(dbColumns=c("month","date","firstName","lastName","city","state","company","product",                                    "category","payment","paymentNature"),                         webColumns=c("Month","Date","First Name","Last Name","City","State","Company","Product",                                     "Category","Payment","Payment Nature"))    companyData <- execute(h,"exec distinct showCompany from alldata")    gbyVars <- c("Company","Product","State","City","Category","Payment Nature")  PLACEHOLDERLIST <- list(    placeholder = 'Please select an option below',    onInitialize = I('function() { this.setValue(""); }')  )  PLACEHOLDERLIST2 <- list(    placeholder = 'Select All',    onInitialize = I('function() { this.setValue(""); }')  )        output$month <- renderUI({    dateRangeInput("date", label = 'PAYMENT DATE', start = startDate, end = endDate, min = minDate, max = maxDate)  })    output$company <- renderUI({    selectizeInput("company","COMPANY" , companyData, multiple = TRUE,options = PLACEHOLDERLIST)  })   output$product <- renderUI({    productQuery <- paste0("getShowInfo[`product;\"",paste(input$company,collapse="|"),"\"]")    productVals <- execute(h,productQuery)    selectizeInput("product", "DRUG/PRODUCT" , productVals, multiple = TRUE,options = PLACEHOLDERLIST2)  })        output$state <- renderUI({    stateQuery <- paste0("getShowInfo[`state;\"",paste(input$company,collapse="|"),"\"]")    stateVals <- execute(h,stateQuery)    selectizeInput("state", "STATE" , stateVals, multiple = TRUE,options = PLACEHOLDERLIST2)  })        output$city <- renderUI({    cityQuery <- paste0("getShowInfo[`city;\"",paste(input$company,collapse="|"),"\"]")    cityVals <- execute(h,cityQuery)    selectizeInput("city", "CITY" , cityVals, multiple = TRUE,options = PLACEHOLDERLIST2)  })    output$showData <- renderUI({    selectInput("showData", label = "DISPLAY TYPE", choices = list("Show Data" = 1, "Aggregate Data" = 2), selected = 1)  })    output$displayColumns <- renderUI({    if (is.null(input$showData)) {selectInput("columns", "SHOW DATA",cmsdata$webColumns, selectize = FALSE, multiple = TRUE, size=11)}    else if(input$showData == 1) {selectInput("columns", "SHOW DATA",cmsdata$webColumns, selectize = FALSE, multiple = TRUE, size=11) }     else if(input$showData == 2) {selectInput("aggVars", "AGGREGATE DATA",gbyVars, selectize = FALSE, multiple = TRUE, size=6) }  })     output$aggregationColumns <- renderUI ({ conditionalPanel(    condition = "input.showData != 1",    selectInput("aggData", "CALCULATE METRICS" , c("Total Payment","Number of Payments","Minimum Payment","Maximum Payment","Average Payment"), selectize = TRUE, multiple = TRUE)  )})    getTableData <- eventReactive(input$queryButton, {    disable("queryButton")    queryInfo <- (list(date=as.character(input$date),company=input$company, product=input$product, state=input$state, city=input$city,columns=cmsdata$dbColumns[cmsdata$webColumns %in% input$columns],showData=input$showData))    if (input$showData !=1) {queryInfo <- c(queryInfo, list(aggVars=cmsdata$dbColumns[cmsdata$webColumns %in% input$aggVars], aggData=input$aggData))} else {queryInfo <- c(queryInfo)}    JSON <- rjson::toJSON(queryInfo)    getQuery <- paste0("getRes \"",URLencode(JSON),"\"")    finalResults <- execute(h,getQuery)    enable("queryButton")    print (finalResults)    fres <<- finalResults    print (class(finalResults[[1]]))    print (finalResults)    finalResults  })   output$tableData <- renderDataTable({ datatable(getTableData()[[1]])}) output$stats     <- renderText({(getTableData())[[2]]}) }# Run the application shinyApp(ui = ui, server = server)